name: on pr
on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - release

env:
  TAG_PREFIX: 'v'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Test
        run: |
          echo $BRANCH
          echo $IS_DRAFT
        env:
          BRANCH: ${{ github.head_ref }}
          IS_DRAFT: ${{ github.event.pull_request.draft == true }}
          MERGED: ${{ github.event.pull_request.merged == true }}

  check-version:
    if: startsWith(github.head_ref, 'releases/v') && github.event_name == 'pull_request' && github.event.action == 'opened' || github.event.action == 'synchronize'
    name: check version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Set versions
        id: vars
        run: |
          pubspec_version=$(egrep -o 'version: [0-9.]+' pubspec.yaml | awk '{print $2}')
          echo "pubspec_version=$pubspec_version" >> $GITHUB_OUTPUT
          echo "branch_version=${RELEASES_V_BRANCH#releases/v}" >> $GITHUB_OUTPUT
        env:
          RELEASES_V_BRANCH: ${{ github.head_ref }}
      - name: Check version and remote branch
        id: check_version
        run: |
          NEED_UPDATE_VERSION=false
          if [[ "$BRANCH_VERSION" != "$PUBSPEC_VERSION" ]]; then
            echo $GITHUB_REPOSITORY
            echo $BUMP_BRANCH
            gh api repos/$GITHUB_REPOSITORY/branches/$BUMP_BRANCH 2> /dev/null | grep "Branch not found" || echo "Branch exists"
            echo After grep
            branch_not_exist=$(gh api repos/$GITHUB_REPOSITORY/branches/$BUMP_BRANCH 2> /dev/null | grep "Branch not found" || echo "")
            echo $branch_not_exist
            if [ -n $branch_not_exist ]; then
              NEED_UPDATE_VERSION=true
            fi
          fi
          echo "need_update_version=$NEED_UPDATE_VERSION" >> $GITHUB_OUTPUT
        env:
          BRANCH_VERSION: ${{ steps.vars.outputs.branch_version }}
          PUBSPEC_VERSION: ${{ steps.vars.outputs.pubspec_version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUMP_BRANCH: chore/bump-version-${{ steps.vars.outputs.branch_version }}
      - name: git setting
        if: ${{ steps.check_version.outputs.need_update_version == 'true' }}
        run: |
          git config --local user.email "playground@turara.com"
          git config --local user.name "turara"
      - name: Bump version
        if: ${{ steps.check_version.outputs.need_update_version == 'true' }}
        run: |
          echo "Bump version"
          sed -i "s/^version.*/version: $BRANCH_VERSION/g" ./pubspec.yaml
          git checkout -b $BUMP_BRANCH
          git add pubspec.yaml
          git commit -m "Bump version to $VEBRANCH_VERSION"
        env:
          BRANCH_VERSION: ${{ steps.vars.outputs.branch_version }}
          RELEASES_V_BRANCH: ${{ github.head_ref }}
          BUMP_BRANCH: chore/bump-version-${{ steps.vars.outputs.branch_version }}
      - name: Create PR and comment
        if: ${{ steps.check_version.outputs.need_update_version == 'true' }}
        run: |
          git push --set-upstream origin $BUMP_BRANCH
          gh pr create --title "Bump version to $BRANCH_VERSION" --body "Bump version to $BRANCH_VERSION" --base $RELEASES_V_BRANCH
          ISSUE_NUMBER=$(gh pr list --limit 1 | awk '{print $1}')
          echo -e "❗️ Version on pubspec.yaml \`$PUBSPEC_VERSION\` is not match with branch name!\n👹 Please merge PR #$ISSUE_NUMBER to bump version to $BRANCH_VERSION." > msg
          export msg=$(cat msg)
          gh pr comment ${{ github.event.pull_request.number }} -b "$msg"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_VERSION: ${{ steps.vars.outputs.branch_version }}
          PUBSPEC_VERSION: ${{ steps.vars.outputs.pubspec_version }}
          RELEASES_V_BRANCH: ${{ github.head_ref }}
          BUMP_BRANCH: chore/bump-version-${{ steps.vars.outputs.branch_version }}

  release-note:
    if: startsWith(github.head_ref, 'releases/v') && github.event.pull_request.merged == true
    name: release note
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set output
        id: vars
        run: |
          echo "version=${BRANCH#releases/v}" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ github.head_ref }}
      - uses: actions/github-script@v6
        id: generateRelease
        env:
          VERSION: ${{ steps.vars.outputs.version }}
        with:
          script: |
            const script = require('./octokit_playground/scripts/generateRelease.js')
            await script({ github, context, core })
      - name: Test
        run: |
          echo $RELEASE_NOTE
        env:
          RELEASE_NOTE: ${{ steps.generateRelease.outputs.releaseNotes }}
