name: on pr
on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - release
      - releases/v*

env:
  TAG_PREFIX: 'v'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Test
        run: |
          echo $BRANCH
          echo $IS_DRAFT
        env:
          BRANCH: ${{ github.head_ref }}
          IS_DRAFT: ${{ github.event.pull_request.draft == true }}
          MERGED: ${{ github.event.pull_request.merged == true }}

  check-version:
    if: startsWith(github.head_ref, 'releases/v') && github.event_name == 'pull_request' && github.event.action == 'opened' || github.event.action == 'synchronize'
    name: check version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: vars
        run: |
          pubspec_version=$(egrep -o 'version: [0-9.]+' pubspec.yaml | awk '{print $2}')
          echo "pubspec_version=$pubspec_version" >> $GITHUB_OUTPUT
          echo "branch_version=${BRANCH#releases/v}" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ github.head_ref }}
      - name: Check version
        run: |
          if [[ "$BRANCH_VERSION" != "$PUBSPEC_VERSION" ]]; then
            gh pr comment ${{ github.event.pull_request.number }} -b "ðŸ‘¹ Version on pubspec.yaml \`$PUBSPEC_VERSION\` is not match with branch name!\nPlease update pubspec.yaml version to \`$BRANCH_VERSION\`!"
          fi
        env:
          BRANCH_VERSION: ${{ steps.vars.outputs.branch_version }}
          PUBSPEC_VERSION: ${{ steps.vars.outputs.pubspec_version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-note:
    if: startsWith(github.head_ref, 'releases/v') && github.event.pull_request.merged == true
    name: release note
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set output
        id: vars
        run: |
          echo "version=${BRANCH#releases/v}" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ github.head_ref }}
      - uses: actions/github-script@v6
        id: generateRelease
        env:
          VERSION: ${{ steps.vars.outputs.version }}
        with:
          script: |
            const script = require('./octokit_playground/scripts/generateRelease.js')
            await script({ github, context, core })
      - name: Test
        run: |
          echo $RELEASE_NOTE
        env:
          RELEASE_NOTE: ${{ steps.generateRelease.outputs.releaseNotes }}
